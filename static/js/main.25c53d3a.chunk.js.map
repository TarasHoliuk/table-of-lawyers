{"version":3,"sources":["Components/FileUploader/FileUploader.tsx","Context/DataContext.ts","Components/Table/Table.tsx","App.tsx","index.tsx"],"names":["FileUploader","React","memo","props","setFileData","type","accept","onChange","event","target","files","file","reader","FileReader","onload","progressEvent","stringFromFile","result","readAsText","uploadFile","DataContext","createContext","Table","parsedData","header","Object","keys","map","columnName","row","index","Phone","Email","Age","Experience","App","useState","fileData","setParsedData","parseConfig","dynamicTyping","Provider","value","className","onClick","data","parseResult","toLowerCase","includes","Papa","parse","console","log","parseData","disabled","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAMaA,EAAgCC,IAAMC,MACjD,SAACC,GACC,IAAQC,EAAgBD,EAAhBC,YAiBR,OACE,uBACEC,KAAK,OACLC,OAAO,OACPC,SAAU,SAACC,GAAD,OAnBK,SAACA,GAClB,GAAIA,EAAMC,OAAOC,MAAO,CACtB,IAAMC,EAAOH,EAAMC,OAAOC,MAAM,GAC1BE,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACC,GAAmB,IAAD,EAC3BC,EAAc,UAAGD,EAAcN,cAAjB,aAAG,EAAsBQ,OAE7Cb,EAAYY,IAGdJ,EAAOM,WAAWP,IAQGQ,CAAWX,SC3B3BY,EAAcnB,IAAMoB,cAAsB,ICK1CC,EAAyBrB,IAAMC,MAC1C,SAACC,GACC,IAAQoB,EAAepB,EAAfoB,WACFC,EAASC,OAAOC,KAAKH,EAAW,IAEtC,OACE,kCACE,gCACE,+BACE,oCACCC,EAAOG,KAAI,SAAAC,GAAU,OACpB,6BAAsBA,GAAbA,MAEX,qDAGJ,gCACGL,EAAWI,KAAI,SAACE,EAAKC,GAAN,OACd,+BACE,6BAAKA,EAAQ,IACb,6BAAKD,EAAI,eACT,6BAAKA,EAAIE,QACT,6BAAKF,EAAIG,QACT,6BAAKH,EAAII,MACT,6BAAKJ,EAAIK,aACT,6BAAKL,EAAI,mBACT,6BAAKA,EAAI,kBACT,6BAAKA,EAAI,oBACT,6BAAKA,EAAI,qBACT,6BAAKA,EAAI,oBACT,iDAZOA,EAAI,8BCjBZM,EAAgB,WAC3B,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBjC,EAAjB,KACMoB,EAAS,oHACf,EAAoCY,mBAAuB,IAA3D,mBAAOb,EAAP,KAAmBe,EAAnB,KAEMC,EAAc,CAClBf,QAAQ,EACRgB,eAAe,GAYjB,OACE,eAACpB,EAAYqB,SAAb,CAAsBC,MAAOL,EAA7B,UACE,qBAAKM,UAAU,MAAf,SACE,cAAC3C,EAAD,CAAcI,YAAaA,MAE7B,wBACEC,KAAK,SACLuC,QAAS,kBAhBG,SAACC,GACjB,IAAMC,EAAcT,EAASU,cAAcC,SAASxB,EAAOuB,eACvDE,IAAKC,MAAML,EAAMN,GACjBU,IAAKC,MAAO1B,EAASqB,EAAON,GAEhCD,EAAcQ,EAAYD,MAC1BM,QAAQC,IAAIN,GAUOO,CAAUhB,IACzBiB,SAAUjB,EAASkB,QAAU,EAH/B,mBAOChC,EAAWgC,OAAS,GAAK,cAACjC,EAAD,CAAOC,WAAYA,QClCnDiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.25c53d3a.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  setFileData: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const FileUploader: React.FC<Props> = React.memo(\n  (props) => {\n    const { setFileData } = props;\n\n    const uploadFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (event.target.files) {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (progressEvent) => {\n          const stringFromFile = progressEvent.target?.result as string;\n\n          setFileData(stringFromFile);\n        };\n\n        reader.readAsText(file);\n      }\n    };\n\n    return (\n      <input\n        type=\"file\"\n        accept=\".csv\"\n        onChange={(event) => uploadFile(event)}\n      />\n    );\n  },\n);\n","import React from 'react';\n\nexport const DataContext = React.createContext<string>('');\n","import React from 'react';\nimport { LawyerData } from '../../types/lawyerData';\n\ninterface Props {\n  parsedData: LawyerData[];\n}\n\nexport const Table: React.FC<Props> = React.memo(\n  (props) => {\n    const { parsedData } = props;\n    const header = Object.keys(parsedData[0]);\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            {header.map(columnName => (\n              <th key={columnName}>{columnName}</th>\n            ))}\n            <th>Duplicate with</th>\n          </tr>\n        </thead>\n        <tbody>\n          {parsedData.map((row, index) => (\n            <tr key={row['License number']}>\n              <td>{index + 1}</td>\n              <td>{row['Full Name']}</td>\n              <td>{row.Phone}</td>\n              <td>{row.Email}</td>\n              <td>{row.Age}</td>\n              <td>{row.Experience}</td>\n              <td>{row['Yearly Income']}</td>\n              <td>{row['Has children']}</td>\n              <td>{row['License states']}</td>\n              <td>{row['Expiration date']}</td>\n              <td>{row['License number']}</td>\n              <td>No duplicates</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","import React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport './App.scss';\nimport { FileUploader } from './Components/FileUploader/FileUploader';\nimport { DataContext } from './Context/DataContext';\nimport { Table } from './Components/Table/Table';\nimport { LawyerData } from './types/lawyerData';\n\nexport const App: React.FC = () => {\n  const [fileData, setFileData] = useState('');\n  const header = 'Full Name,Phone,Email,Age,Experience,Yearly Income,Has children,License states,Expiration date,License number\\r\\n';\n  const [parsedData, setParsedData] = useState<LawyerData[]>([]);\n\n  const parseConfig = {\n    header: true,\n    dynamicTyping: true,\n  };\n\n  const parseData = (data: string) => {\n    const parseResult = fileData.toLowerCase().includes(header.toLowerCase())\n      ? Papa.parse(data, parseConfig)\n      : Papa.parse((header + data), parseConfig);\n\n    setParsedData(parseResult.data as LawyerData[]);\n    console.log(parseResult);\n  };\n\n  return (\n    <DataContext.Provider value={fileData}>\n      <div className=\"App\">\n        <FileUploader setFileData={setFileData} />\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => parseData(fileData)}\n        disabled={fileData.length <= 0}\n      >\n        Parse\n      </button>\n      {parsedData.length > 0 && <Table parsedData={parsedData} />}\n    </DataContext.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}