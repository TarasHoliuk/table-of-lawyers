{"version":3,"sources":["Components/FileUploader/FileUploader.tsx","Components/Table/Table.tsx","states.ts","validator.ts","FieldsValidators/nameValidator.ts","FieldsValidators/phoneValidator.ts","FieldsValidators/emailValidator.ts","FieldsValidators/ageValidator.ts","FieldsValidators/experienceValidator.ts","FieldsValidators/yearlyIncomeValidator.ts","FieldsValidators/hasChildrenValidator.ts","FieldsValidators/licenseStatesValidator.ts","FieldsValidators/expirationDateValidator.ts","FieldsValidators/licenseNumberValidator.ts","FieldsValidators/headersValidator.ts","mapper.ts","parser.ts","App.tsx","FieldsValidators/duplicateValidator.ts","index.tsx"],"names":["FileUploader","props","uploadHandler","useState","file","setFile","className","type","accept","onChange","event","target","files","reader","FileReader","onload","progressEvent","csvString","result","readAsText","uploadFile","name","Table","React","memo","records","map","row","id","fullName","isValid","title","errorMessage","value","phone","email","age","experience","yearlyIncome","hasChildren","licenseStates","expirationDate","licenseNumber","duplicateWith","states","abbreviation","validators","errorLevel","includes","formattedPhone","test","length","isInteger","Number","isAdult","isPositive","isLessThanAge","isLessThanMillion","toFixed","statesString","enteredStates","split","formattedStates","state","lowState","toLowerCase","foundedState","find","basicState","join","date","isCorrectFormat","currentDate","Date","toDateString","isLicenseValid","parse","INVALID_DATA","standardHeaders","INVALID_HEADERS","mapper","headers","data","normalizedHeaders","header","replace","match","index","toUpperCase","unshift","push","normalizeHeaders","idCounter","lawyer","reduce","acc","field","key","Object","assign","objectify","mappedLawyer","trim","parseConfig","dynamicTyping","App","lawyers","setLawyers","globalError","setGlobalError","errorsAmount","setErrorsAmount","headersError","setHeadersError","fileData","parseResult","Papa","shift","parser","normalizedRecord","console","log","every","Error","headersValidator","keys","error","errorsCounter","validatedData","record","validatedLawyer","foundedDuplicate","duplicate","duplicateValidator","validator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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ACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,UACNwB,aAAc,MAEhB,CACExB,KAAM,OACNwB,aAAc,MAEhB,CACExB,KAAM,SACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,YACNwB,aAAc,MAEhB,CACExB,KAAM,QACNwB,aAAc,MAEhB,CACExB,KAAM,mBACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,gBACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,YACNwB,aAAc,MAEhB,CACExB,KAAM,cACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,UACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,SACNwB,aAAc,MAEhB,CACExB,KAAM,gBACNwB,aAAc,MAEhB,CACExB,KAAM,aACNwB,aAAc,MAEhB,CACExB,KAAM,aACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,iBACNwB,aAAc,MAEhB,CACExB,KAAM,eACNwB,aAAc,MAEhB,CACExB,KAAM,2BACNwB,aAAc,MAEhB,CACExB,KAAM,OACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB,KAAM,SACNwB,aAAc,MAEhB,CACExB,KAAM,QACNwB,aAAc,MAEhB,CACExB,KAAM,eACNwB,aAAc,MAEhB,CACExB,KAAM,cACNwB,aAAc,MAEhB,CACExB,KAAM,eACNwB,aAAc,MAEhB,CACExB,KAAM,iBACNwB,aAAc,MAEhB,CACExB,KAAM,eACNwB,aAAc,MAEhB,CACExB,KAAM,YACNwB,aAAc,MAEhB,CACExB,KAAM,QACNwB,aAAc,MAEhB,CACExB,KAAM,OACNwB,aAAc,MAEhB,CACExB,KAAM,UACNwB,aAAc,MAEhB,CACExB,KAAM,iBACNwB,aAAc,MAEhB,CACExB,KAAM,WACNwB,aAAc,MAEhB,CACExB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","file":"static/js/main.5ce0e2d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface Props {\n  uploadHandler: (csvFileString: string) => void;\n}\n\nexport const FileUploader: React.FC<Props> = (props) => {\n  const { uploadHandler } = props;\n\n  const [file, setFile] = useState<File>();\n\n  const uploadFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target?.files) {\n      setFile(event.target.files[0]);\n      const reader = new FileReader();\n\n      reader.onload = (progressEvent) => {\n        const csvString = progressEvent.target?.result as string;\n        uploadHandler(csvString);\n      };\n\n      if (event.target.files[0]) {\n        reader.readAsText(event.target.files[0]);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"file is-info has-name\">\n        <label className=\"file-label\">\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            className=\"file-input\"\n            onChange={(event) => uploadFile(event)}\n          />\n          <span className=\"file-cta\">\n            <span className=\"file-icon\">\n              <i className=\"fas fa-upload\"></i>\n            </span>\n            <span className=\"file-label\">\n              CSV file...\n            </span>\n          </span>\n          <span className=\"file-name\">\n            {file ? `${file.name}` : 'Choose the file'}\n          </span>\n        </label>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { ValidatedLawyer } from '../../types/ValidatedLawyer';\n\ninterface Props {\n  records: ValidatedLawyer[];\n}\n\nexport const Table: React.FC<Props> = React.memo(\n  (props) => {\n    const { records } = props;\n\n    return (\n      <table className=\"table is-bordered is-stripped is-hoverable\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Full Name</th>\n            <th>Phone</th>\n            <th>Email</th>\n            <th>Age</th>\n            <th>Experience</th>\n            <th>Yearly Income</th>\n            <th>Has children</th>\n            <th>License states</th>\n            <th>Expiration date</th>\n            <th>License number</th>\n            <th>Duplicated with</th>\n          </tr>\n        </thead>\n        <tbody>\n          {records.map((row) => (\n            <tr key={row.id}>\n              <td>{row.id}</td>\n              <td\n                className={row.fullName.isValid ? '' : 'has-background-danger'}\n                title={row.fullName.errorMessage}\n              >\n                {row.fullName.value}\n              </td>\n              <td\n                className={row.phone.isValid ? '' : 'has-background-danger'}\n                title={row.phone.errorMessage}\n              >\n                {row.phone.value}\n              </td>\n              <td\n                className={row.email.isValid ? '' : 'has-background-danger'}\n                title={row.email.errorMessage}\n              >\n                {row.email.value}\n              </td>\n              <td\n                className={row.age.isValid ? '' : 'has-background-danger'}\n                title={row.age.errorMessage}\n              >\n                {row.age.value}\n              </td>\n              <td\n                className={row.experience.isValid ? '' : 'has-background-danger'}\n                title={row.experience.errorMessage}\n              >\n                {row.experience.value}\n              </td>\n              <td\n                className={row.yearlyIncome.isValid ? '' : 'has-background-danger'}\n                title={row.yearlyIncome.errorMessage}\n              >\n                {row.yearlyIncome.value}\n              </td>\n              <td\n                className={row.hasChildren.isValid ? '' : 'has-background-danger'}\n                title={row.hasChildren.errorMessage}\n              >\n                {typeof row.hasChildren.value === 'string'\n                  ? row.hasChildren.value\n                  : row.hasChildren.value\n                    ? 'TRUE'\n                    : 'FALSE'}\n              </td>\n              <td\n                className={row.licenseStates.isValid ? '' : 'has-background-danger'}\n                title={row.licenseStates.errorMessage}\n              >\n                {row.licenseStates.value}\n              </td>\n              <td\n                className={row.expirationDate.isValid ? '' : 'has-background-danger'}\n                title={row.expirationDate.errorMessage}\n              >\n                {row.expirationDate.value}\n              </td>\n              <td\n                className={row.licenseNumber.isValid ? '' : 'has-background-danger'}\n                title={row.licenseNumber.errorMessage}\n              >\n                {row.licenseNumber.value}\n              </td>\n              <td className={row.duplicateWith ? 'has-background-danger' : ''}>\n                {row.duplicateWith}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","export const states = [\n  {\n    name: 'Alabama',\n    abbreviation: 'AL',\n  },\n  {\n    name: 'Alaska',\n    abbreviation: 'AK',\n  },\n  {\n    name: 'American Samoa',\n    abbreviation: 'AS',\n  },\n  {\n    name: 'Arizona',\n    abbreviation: 'AZ',\n  },\n  {\n    name: 'Arkansas',\n    abbreviation: 'AR',\n  },\n  {\n    name: 'California',\n    abbreviation: 'CA',\n  },\n  {\n    name: 'Colorado',\n    abbreviation: 'CO',\n  },\n  {\n    name: 'Connecticut',\n    abbreviation: 'CT',\n  },\n  {\n    name: 'Delaware',\n    abbreviation: 'DE',\n  },\n  {\n    name: 'District Of Columbia',\n    abbreviation: 'DC',\n  },\n  {\n    name: 'Federated States Of Micronesia',\n    abbreviation: 'FM',\n  },\n  {\n    name: 'Florida',\n    abbreviation: 'FL',\n  },\n  {\n    name: 'Georgia',\n    abbreviation: 'GA',\n  },\n  {\n    name: 'Guam',\n    abbreviation: 'GU',\n  },\n  {\n    name: 'Hawaii',\n    abbreviation: 'HI',\n  },\n  {\n    name: 'Idaho',\n    abbreviation: 'ID',\n  },\n  {\n    name: 'Illinois',\n    abbreviation: 'IL',\n  },\n  {\n    name: 'Indiana',\n    abbreviation: 'IN',\n  },\n  {\n    name: 'Iowa',\n    abbreviation: 'IA',\n  },\n  {\n    name: 'Kansas',\n    abbreviation: 'KS',\n  },\n  {\n    name: 'Kentucky',\n    abbreviation: 'KY',\n  },\n  {\n    name: 'Louisiana',\n    abbreviation: 'LA',\n  },\n  {\n    name: 'Maine',\n    abbreviation: 'ME',\n  },\n  {\n    name: 'Marshall Islands',\n    abbreviation: 'MH',\n  },\n  {\n    name: 'Maryland',\n    abbreviation: 'MD',\n  },\n  {\n    name: 'Massachusetts',\n    abbreviation: 'MA',\n  },\n  {\n    name: 'Michigan',\n    abbreviation: 'MI',\n  },\n  {\n    name: 'Minnesota',\n    abbreviation: 'MN',\n  },\n  {\n    name: 'Mississippi',\n    abbreviation: 'MS',\n  },\n  {\n    name: 'Missouri',\n    abbreviation: 'MO',\n  },\n  {\n    name: 'Montana',\n    abbreviation: 'MT',\n  },\n  {\n    name: 'Nebraska',\n    abbreviation: 'NE',\n  },\n  {\n    name: 'Nevada',\n    abbreviation: 'NV',\n  },\n  {\n    name: 'New Hampshire',\n    abbreviation: 'NH',\n  },\n  {\n    name: 'New Jersey',\n    abbreviation: 'NJ',\n  },\n  {\n    name: 'New Mexico',\n    abbreviation: 'NM',\n  },\n  {\n    name: 'New York',\n    abbreviation: 'NY',\n  },\n  {\n    name: 'North Carolina',\n    abbreviation: 'NC',\n  },\n  {\n    name: 'North Dakota',\n    abbreviation: 'ND',\n  },\n  {\n    name: 'Northern Mariana Islands',\n    abbreviation: 'MP',\n  },\n  {\n    name: 'Ohio',\n    abbreviation: 'OH',\n  },\n  {\n    name: 'Oklahoma',\n    abbreviation: 'OK',\n  },\n  {\n    name: 'Oregon',\n    abbreviation: 'OR',\n  },\n  {\n    name: 'Palau',\n    abbreviation: 'PW',\n  },\n  {\n    name: 'Pennsylvania',\n    abbreviation: 'PA',\n  },\n  {\n    name: 'Puerto Rico',\n    abbreviation: 'PR',\n  },\n  {\n    name: 'Rhode Island',\n    abbreviation: 'RI',\n  },\n  {\n    name: 'South Carolina',\n    abbreviation: 'SC',\n  },\n  {\n    name: 'South Dakota',\n    abbreviation: 'SD',\n  },\n  {\n    name: 'Tennessee',\n    abbreviation: 'TN',\n  },\n  {\n    name: 'Texas',\n    abbreviation: 'TX',\n  },\n  {\n    name: 'Utah',\n    abbreviation: 'UT',\n  },\n  {\n    name: 'Vermont',\n    abbreviation: 'VT',\n  },\n  {\n    name: 'Virgin Islands',\n    abbreviation: 'VI',\n  },\n  {\n    name: 'Virginia',\n    abbreviation: 'VA',\n  },\n  {\n    name: 'Washington',\n    abbreviation: 'WA',\n  },\n  {\n    name: 'West Virginia',\n    abbreviation: 'WV',\n  },\n  {\n    name: 'Wisconsin',\n    abbreviation: 'WI',\n  },\n  {\n    name: 'Wyoming',\n    abbreviation: 'WY',\n  },\n];\n","import { ageValidator } from './FieldsValidators/ageValidator';\nimport { duplicateValidator } from './FieldsValidators/duplicateValidator';\nimport { emailValidator } from './FieldsValidators/emailValidator';\nimport { experienceValidator } from './FieldsValidators/experienceValidator';\nimport { expirationDateValidator } from './FieldsValidators/expirationDateValidator';\nimport { hasChildrenValidator } from './FieldsValidators/hasChildrenValidator';\nimport { licenseNumberValidator } from './FieldsValidators/licenseNumberValidator';\nimport { licenseStatesValidator } from './FieldsValidators/licenseStatesValidator';\nimport { nameValidator } from './FieldsValidators/nameValidator';\nimport { phoneValidator } from './FieldsValidators/phoneValidator';\nimport { yearlyIncomeValidator } from './FieldsValidators/yearlyIncomeValidator';\nimport { NormalizedRecord } from './types/NormalizedRecord';\nimport { ValidatedLawyer } from './types/ValidatedLawyer';\n\nconst validators = {\n  fullName: nameValidator,\n  phone: phoneValidator,\n  email: emailValidator,\n  age: ageValidator,\n  experience: experienceValidator,\n  yearlyIncome: yearlyIncomeValidator,\n  hasChildren: hasChildrenValidator,\n  licenseStates: licenseStatesValidator,\n  expirationDate: expirationDateValidator,\n  licenseNumber: licenseNumberValidator,\n};\n\nexport const INVALID_DATA = 'Invalid lawyers data';\n\nexport const validator = (data: NormalizedRecord[]) => {\n  let errorsCounter = 0;\n\n  let validatedData = data.map(record => {\n    const validatedLawyer: ValidatedLawyer = {} as ValidatedLawyer;\n\n    for (const key in record) {\n      switch (key) {\n        case 'fullName':\n          validatedLawyer.fullName = validators.fullName(record.fullName);\n\n          if (validatedLawyer.fullName.errorLevel === 'global') {\n            throw new Error(INVALID_DATA);\n          } else if (validatedLawyer.fullName.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'phone':\n          validatedLawyer.phone = validators.phone(record.phone);\n\n          if (validatedLawyer.phone.errorLevel === 'global') {\n            throw new Error(INVALID_DATA);\n          } else if (validatedLawyer.phone.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'email':\n          validatedLawyer.email = validators.email(record.email);\n\n          if (validatedLawyer.email.errorLevel === 'global') {\n            throw new Error(INVALID_DATA);\n          } else if (validatedLawyer.email.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'age':\n          validatedLawyer.age = validators.age(record.age);\n\n          if (validatedLawyer.age.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'experience':\n          validatedLawyer.experience = validators.experience(record.experience, record.age);\n\n          if (validatedLawyer.experience.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'yearlyIncome':\n          validatedLawyer.yearlyIncome = validators.yearlyIncome(record.yearlyIncome);\n\n          if (validatedLawyer.yearlyIncome.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'hasChildren':\n          validatedLawyer.hasChildren = validators.hasChildren(record.hasChildren);\n\n          if (validatedLawyer.hasChildren.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'licenseStates':\n          validatedLawyer.licenseStates = validators.licenseStates(record.licenseStates);\n\n          if (validatedLawyer.licenseStates.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'expirationDate':\n          validatedLawyer.expirationDate = validators.expirationDate(record.expirationDate);\n\n          if (validatedLawyer.expirationDate.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'licenseNumber':\n          validatedLawyer.licenseNumber = validators.licenseNumber(record.licenseNumber);\n\n          if (validatedLawyer.licenseNumber.errorLevel === 'local') {\n            errorsCounter += 1;\n          }\n          break;\n        case 'id':\n          validatedLawyer.id = record.id;\n          break;\n        case 'duplicateWith':\n          validatedLawyer.duplicateWith = record.duplicateWith;\n          break;\n        default:\n          break;\n      }\n    }\n\n    return validatedLawyer;\n  });\n\n  validatedData = duplicateValidator(validatedData);\n\n  return { validatedData, errorsCounter };\n};\n","export const nameValidator = (name: string) => {\n  let errorMessage = '';\n  let isValid = false;\n  let errorLevel = null;\n\n  if (name === null || name === '') {\n    return {\n      errorLevel: 'global',\n      value: name,\n      isValid,\n      errorMessage,\n    };\n  }\n\n  isValid = name.includes(' ');\n  errorMessage = isValid\n    ? ''\n    : 'Full name should include at least two words';\n\n  errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: name,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const phoneValidator = (phone: string) => {\n  const phoneRegExp = /^(\\+1|\\+)?([\\d]{10,11}$)/;\n\n  let formattedPhone = '';\n  let errorMessage = '';\n  let errorLevel = null;\n  let isValid = false;\n\n  if (phone === null || phone === '') {\n    return {\n      errorLevel: 'global',\n      value: phone,\n      errorMessage,\n      isValid,\n    };\n  }\n\n  isValid = phoneRegExp.test(phone);\n\n  if (isValid) {\n    switch (phone.length) {\n      case 10:\n        formattedPhone = `+1${phone}`;\n        break;\n      case 11:\n        formattedPhone = `+${phone}`;\n        break;\n      default:\n        formattedPhone = phone;\n        break;\n    }\n  } else {\n    formattedPhone = phone;\n    errorMessage = 'Phone format is not valid';\n    errorLevel = 'local';\n  }\n\n  return {\n    value: formattedPhone,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const emailValidator = (email: string) => {\n  let isValid = false;\n  let errorMessage = '';\n  let errorLevel = null;\n\n  if (email === null || email === '') {\n    return {\n      errorLevel: 'global',\n      value: email,\n      errorMessage,\n      isValid,\n    };\n  }\n\n  const emailRegExp = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n  isValid = emailRegExp.test(email);\n  errorMessage = isValid\n    ? ''\n    : 'Email is not valid';\n\n  errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: email,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const ageValidator = (age: number) => {\n  let errorMessage = '';\n\n  const isInteger = Number.isInteger(age);\n  errorMessage += isInteger\n    ? ''\n    : 'Age should be integer ';\n\n  const isPositive = age >= 0;\n  errorMessage += isPositive\n    ? ''\n    : 'Age should be equal or more zero';\n\n  const isAdult = age >= 21;\n  errorMessage += isAdult\n    ? ''\n    : 'Lawyer should be adult';\n\n  const isValid = isInteger && isAdult;\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: age,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const experienceValidator = (experience: number, age: number) => {\n  let errorMessage = '';\n\n  const isPositive = experience >= 0;\n  errorMessage += isPositive\n    ? ''\n    : 'Experience should be equal or more zero ';\n\n  const isLessThanAge = experience < age;\n  errorMessage += isLessThanAge\n    ? ''\n    : 'Experience should be less than age';\n\n  const isValid = isPositive && isLessThanAge;\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: experience,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const yearlyIncomeValidator = (yearlyIncome: number) => {\n  let errorMessage = '';\n\n  const isPositive = yearlyIncome > 0;\n  errorMessage = isPositive\n    ? ''\n    : 'Yearly income should be equal or more zero';\n\n  const isLessThanMillion = yearlyIncome <= 1000000;\n  errorMessage = isLessThanMillion\n    ? ''\n    : 'Yearly income should be equal or less than one million';\n\n  const value = +yearlyIncome.toFixed(2);\n\n  const isValid = isPositive && isLessThanMillion;\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    errorMessage,\n    value,\n    isValid,\n    errorLevel,\n  };\n};\n","export const hasChildrenValidator = (hasChildren: boolean | string) => {\n  let isValid = true;\n  let value;\n  let errorMessage = '';\n\n  if (typeof hasChildren === 'string') {\n    switch (hasChildren) {\n      case '':\n        isValid = true;\n        value = false;\n        break;\n      case 'TRUE':\n        value = true;\n        isValid = true;\n        break;\n      case 'FALSE':\n        isValid = true;\n        value = false;\n        break;\n      default:\n        isValid = false;\n        value = hasChildren;\n        errorMessage = 'Value should be TRUE/FALSE or empty';\n    }\n  } else {\n    value = hasChildren;\n  }\n\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","import { states } from '../states';\n\nexport const licenseStatesValidator = (statesString: string) => {\n  const enteredStates = statesString.split(' | ');\n  let errorMessage = '';\n  let isValid = true;\n\n  const formattedStates = enteredStates.map(state => {\n    const lowState = state.toLowerCase();\n    const foundedState = states.find(basicState => (\n      basicState.name.toLowerCase() === lowState\n      || basicState.abbreviation.toLowerCase() === lowState\n    ));\n\n    if (!foundedState) {\n      errorMessage = 'One of the states is not valid';\n      isValid = false;\n    }\n\n    return foundedState\n      ? foundedState.abbreviation\n      : state;\n  });\n\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: formattedStates.join(' | '),\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const expirationDateValidator = (date: string) => {\n  const firstFormatRegExp = /(^(((\\d\\d)(([02468][048])|([13579][26]))-02-29)|(((\\d\\d)(\\d\\d)))-((((0\\d)|(1[0-2]))-((0\\d)|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))))))/;\n  const secondFormatRegExp = /(^((((0\\d)|(1[0-2]))\\/((0\\d)|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))\\/(((\\d\\d)(([02468][048])|([13579][26]))-02-29)|(((\\d\\d)(\\d\\d))))/;\n\n  let errorMessage = '';\n\n  const isCorrectFormat\n    = firstFormatRegExp.test(date)\n    || secondFormatRegExp.test(date);\n\n  errorMessage += isCorrectFormat\n    ? null\n    : 'Date format is not valid ';\n\n  const currentDate = new Date().toDateString();\n\n  const isLicenseValid = Date.parse(currentDate) < Date.parse(date);\n  errorMessage += isLicenseValid\n    ? ''\n    : 'Expiration date is not valid';\n\n  const isValid = isCorrectFormat && isLicenseValid;\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: date,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","export const licenseNumberValidator = (licenseNumber: string) => {\n  const licenseNumberRegExp = /^(([a-zA-Z]|[\\d]){6})$/;\n\n  let errorMessage = '';\n\n  const isValid = licenseNumberRegExp.test(licenseNumber);\n  errorMessage = isValid\n    ? ''\n    : 'License number is not valid';\n\n  const errorLevel = isValid\n    ? null\n    : 'local';\n\n  return {\n    value: licenseNumber,\n    errorMessage,\n    isValid,\n    errorLevel,\n  };\n};\n","const standardHeaders = [\n  'id',\n  'fullName',\n  'phone',\n  'email',\n  'age',\n  'experience',\n  'yearlyIncome',\n  'hasChildren',\n  'licenseStates',\n  'expirationDate',\n  'licenseNumber',\n  'duplicateWith',\n];\n\nexport const INVALID_HEADERS = 'Table headers is not valid';\n\nexport const headersValidator = (headers: string[]) => {\n  console.log(headers);\n\n  const isValidHeaders = headers.every(header => standardHeaders.includes(header));\n\n  if (!isValidHeaders) {\n    throw new Error(INVALID_HEADERS);\n  }\n};\n","import { CellData } from './types/CellData';\nimport { NormalizedRecord } from './types/NormalizedRecord';\n\nfunction toCamelCase(string: string) {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) => {\n    if (+match === 0) {\n      return '';\n    }\n    return index === 0 ? match.toLowerCase() : match.toUpperCase();\n  });\n}\n\nconst normalizeHeaders = (headers: string[]) => {\n  const normalizedHeaders = headers.map(header => toCamelCase(header));\n  normalizedHeaders.unshift('id');\n  normalizedHeaders.push('duplicateWith');\n\n  return normalizedHeaders;\n};\n\nconst objectify = (headers: string[], records: CellData[][]) => {\n  return records.map(lawyer => {\n    const normalizedRecord = lawyer.reduce<NormalizedRecord>((acc, field, index) => {\n      const key = headers[index] as keyof NormalizedRecord;\n\n      Object.assign(acc, { [key]: field });\n\n      return acc;\n    }, {} as NormalizedRecord);\n\n    return normalizedRecord;\n  });\n};\n\nexport const mapper = (headers: string[], data: CellData[][]) => {\n  const normalizedHeaders = normalizeHeaders(headers);\n\n  let idCounter = 1;\n  const normalizedRecords = data.map(lawyer => {\n    const mappedLawyer = lawyer.map(field => {\n      if (typeof field === 'string') {\n        field.trim();\n      }\n\n      return field;\n    });\n\n    mappedLawyer.unshift(idCounter);\n    mappedLawyer.push(null);\n    idCounter += 1;\n\n    return mappedLawyer;\n  });\n\n  return objectify(normalizedHeaders, normalizedRecords);\n};\n","import Papa from 'papaparse';\nimport { CellData } from './types/CellData';\n\nconst parseConfig = {\n  dynamicTyping: true,\n};\n\nexport const parser = (fileData: string) => {\n  const parseResult = Papa.parse<CellData[]>(fileData, parseConfig).data;\n\n  const headers = parseResult.shift() as string[];\n\n  return { headers, records: parseResult };\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { FileUploader } from './Components/FileUploader/FileUploader';\nimport { Table } from './Components/Table/Table';\nimport { validator, INVALID_DATA } from './validator';\nimport { headersValidator, INVALID_HEADERS } from './FieldsValidators/headersValidator';\nimport { mapper } from './mapper';\nimport { parser } from './parser';\nimport { ValidatedLawyer } from './types/ValidatedLawyer';\n\nexport const App: React.FC = () => {\n  const [lawyers, setLawyers] = useState<ValidatedLawyer[]>([]);\n  const [globalError, setGlobalError] = useState(false);\n  const [errorsAmount, setErrorsAmount] = useState(0);\n  const [headersError, setHeadersError] = useState(false);\n\n  const onUpload = (csvString: string) => {\n    const { headers, records } = parser(csvString);\n    const normalizedRecord = mapper(headers, records);\n\n    try {\n      headersValidator(Object.keys(normalizedRecord[0]));\n      setGlobalError(false);\n    } catch (error) {\n      if (error === INVALID_HEADERS) {\n        setHeadersError(true);\n        setGlobalError(true);\n      } else {\n        throw error;\n      }\n    }\n\n    try {\n      const { validatedData, errorsCounter } = validator(normalizedRecord);\n      setErrorsAmount(errorsCounter);\n      setGlobalError(false);\n      setLawyers(validatedData);\n    } catch (error) {\n      if (error === INVALID_DATA) {\n        setGlobalError(true);\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"App mt-6 is-flex is-flex-direction-column \">\n        <h1 className=\"title is-3 has-text-centered m-3\">Lawyer table validator</h1>\n        <FileUploader uploadHandler={onUpload} />\n\n        {\n          errorsAmount && (\n            <span className=\"m-2 has-text-danger\">\n              {`Number of errors: ${errorsAmount}`}\n            </span>\n          )\n        }\n\n        {globalError\n          ? <div>{headersError ? INVALID_HEADERS : INVALID_DATA}</div>\n          : (lawyers.length > 0) && <Table records={lawyers} />}\n      </div>\n    </div>\n  );\n};\n","import { ValidatedLawyer } from '../types/ValidatedLawyer';\n\nexport const duplicateValidator = (validatedData: ValidatedLawyer[]) => {\n  let foundedDuplicate: null | ValidatedLawyer | undefined = null;\n  return validatedData.map(lawyer => {\n    foundedDuplicate = validatedData.find(duplicate => {\n      return (duplicate.phone.value === lawyer.phone.value\n        || duplicate.email.value.toLowerCase() === lawyer.email.value.toLowerCase())\n      && duplicate.id !== lawyer.id;\n    });\n\n    if (foundedDuplicate) {\n      lawyer.duplicateWith = foundedDuplicate.id;\n    }\n\n    return lawyer;\n  });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}