{"version":3,"sources":["Components/FileUploader/FileUploader.tsx","Components/Table/Table.tsx","FieldsValidators/ageValidator.ts","FieldsValidators/emailValidator.ts","FieldsValidators/experienceValidator.ts","FieldsValidators/expirationDateValidator.ts","FieldsValidators/hasChildrenValidator.ts","FieldsValidators/licenseNumberValidator.ts","states.ts","FieldsValidators/licenseStatesValidator.ts","FieldsValidators/nameValidator.ts","FieldsValidators/phoneValidator.ts","FieldsValidators/yearlyIncomeValidator.ts","parser.ts","App.tsx","Components/validator.ts","FieldsValidators/duplicateValidator.ts","index.tsx"],"names":["FileUploader","React","memo","props","useState","isChanged","setIsChanged","inputRef","createRef","setFileData","ref","type","accept","onChange","onClick","input","current","files","file","reader","FileReader","onload","progressEvent","csvString","target","result","readAsText","uploadFile","disabled","Table","validatedData","map","row","ID","value","Phone","Email","Age","Experience","ageValidator","age","errorMessage","isInteger","Number","isAdult","isValid","emailValidator","email","setGlobalError","trimmedEmail","trim","test","experienceValidator","experience","isPositive","isLessThanAge","expirationDateValidator","date","trimmedDate","isCorrectFormat","currentDate","Date","toDateString","isLicenseValid","parse","hasChildrenValidator","hasChildren","trimmedHasChildren","licenseNumberValidator","licenseNumber","trimmedLicenseNumber","states","name","abbreviation","licenseStatesValidator","statesString","enteredStates","split","state","lowState","toLowerCase","foundedState","find","basicState","join","nameValidator","trimmedName","includes","phoneValidator","phone","formattedPhone","trimmedPhone","length","yearlyIncomeValidator","yearlyIncome","isLessThanMillion","toFixed","header","parseConfig","dynamicTyping","App","fileData","parsedData","setParsedData","setValidatedData","globalError","useEffect","data","Papa","showTable","lawyer","validatedLawyer","idCounter","key","foundedDuplicate","duplicate","duplicateValidator","validator","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AAc,MAEhB,CACED,KAAM,aACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,cACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,uBACNC,aAAc,MAEhB,CACED,KAAM,iCACNC,aAAc,MAEhB,CACED,KAAM,UACNC,aAAc,MAEhB,CACED,KAAM,UACNC,aAAc,MAEhB,CACED,KAAM,OACNC,aAAc,MAEhB,CACED,KAAM,SACNC,aAAc,MAEhB,CACED,KAAM,QACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,UACNC,aAAc,MAEhB,CACED,KAAM,OACNC,aAAc,MAEhB,CACED,KAAM,SACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,YACNC,aAAc,MAEhB,CACED,KAAM,QACNC,aAAc,MAEhB,CACED,KAAM,mBACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,gBACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,YACNC,aAAc,MAEhB,CACED,KAAM,cACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,UACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,SACNC,aAAc,MAEhB,CACED,KAAM,gBACNC,aAAc,MAEhB,CACED,KAAM,aACNC,aAAc,MAEhB,CACED,KAAM,aACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,iBACNC,aAAc,MAEhB,CACED,KAAM,eACNC,aAAc,MAEhB,CACED,KAAM,2BACNC,aAAc,MAEhB,CACED,KAAM,OACNC,aAAc,MAEhB,CACED,KAAM,WACNC,aAAc,MAEhB,CACED,KAAM,SACNC,aAAc,MAEhB,CACED,KAAM,QACNC,aAAc,MAEhB,CACED,KAAM,eACNC,aAAc,MAEhB,CACED,KAAM,cACNC,aAAc,MAEhB,CACED,KAAM,eACNC,aAAc,MAEhB,CACED,K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","file":"static/js/main.44411ec3.chunk.js","sourcesContent":["import React, { RefObject, useState } from 'react';\n\ninterface Props {\n  setFileData: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const FileUploader: React.FC<Props> = React.memo(\n  (props) => {\n    const [isChanged, setIsChanged] = useState(false);\n    const inputRef: RefObject<HTMLInputElement> = React.createRef();\n    const { setFileData } = props;\n\n    const uploadFile = (input: React.RefObject<HTMLInputElement>) => {\n      if (input.current?.files) {\n        const file = input.current.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (progressEvent) => {\n          const csvString = progressEvent.target?.result as string;\n          setFileData(csvString);\n        };\n\n        reader.readAsText(file);\n      }\n    };\n\n    return (\n      <>\n        <input\n          ref={inputRef}\n          type=\"file\"\n          accept=\".csv\"\n          onChange={() => setIsChanged(true)}\n        />\n\n        <button\n          type=\"button\"\n          onClick={() => uploadFile(inputRef)}\n          disabled={!isChanged}\n        >\n          Parse data\n        </button>\n      </>\n    );\n  },\n);\n","import React from 'react';\nimport { ValidatedLawyer } from '../../types/validatedLawyer';\n\ninterface Props {\n  validatedData: ValidatedLawyer[];\n}\n\nexport const Table: React.FC<Props> = React.memo(\n  (props) => {\n    const { validatedData } = props;\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Full Name</th>\n            <th>Phone</th>\n            <th>Email</th>\n            <th>Age</th>\n            <th>Experience</th>\n            <th>Yearly Income</th>\n            <th>Has children</th>\n            <th>License states</th>\n            <th>Expiration date</th>\n            <th>License number</th>\n            <th>Duplicated with</th>\n          </tr>\n        </thead>\n        <tbody>\n          {validatedData.map((row) => (\n            <tr key={row.ID}>\n              <td>{row.ID}</td>\n              <td>{row['Full Name'].value}</td>\n              <td>{row.Phone.value}</td>\n              <td>{row.Email.value}</td>\n              <td>{row.Age.value}</td>\n              <td>{row.Experience.value}</td>\n              <td>{row['Yearly Income'].value}</td>\n              <td>{row['Has children'].value}</td>\n              <td>{row['License states'].value}</td>\n              <td>{row['Expiration date'].value}</td>\n              <td>{row['License number'].value}</td>\n              <td>{row['Duplicated with']}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","export const ageValidator = (age: number) => {\n  let errorMessage = '';\n\n  const isInteger = Number.isInteger(age);\n  errorMessage += isInteger\n    ? ''\n    : 'Age should be integer ';\n\n  const isPositive = age >= 0;\n  errorMessage += isPositive\n    ? ''\n    : 'Age should be equal or more zero';\n\n  const isAdult = age >= 21;\n  errorMessage += isAdult\n    ? ''\n    : 'Lawyer should be adult';\n\n  const isValid = isInteger && isAdult;\n\n  return {\n    value: age,\n    errorMessage,\n    isValid,\n  };\n};\n","export const emailValidator = (\n  email: string,\n  setGlobalError: React.Dispatch<React.SetStateAction<boolean>>,\n) => {\n  let isValid = false;\n  let errorMessage = '';\n  let trimmedEmail = '';\n  // const globalErrorResult = {\n  //   value: email,\n  //   errorMessage,\n  //   isValid,\n  //   globalError: true,\n  // };\n\n  if (email === null) {\n    setGlobalError(true);\n  } else {\n    trimmedEmail = email.trim();\n\n    if (trimmedEmail === '') {\n      setGlobalError(true);\n    }\n  }\n\n  const emailRegExp = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n  isValid = emailRegExp.test(trimmedEmail);\n  errorMessage = isValid\n    ? ''\n    : 'Email is not valid';\n\n  return {\n    value: trimmedEmail,\n    errorMessage,\n    isValid,\n  };\n};\n","export const experienceValidator = (experience: number, age: number) => {\n  let errorMessage = '';\n\n  const isPositive = experience >= 0;\n  errorMessage += isPositive\n    ? ''\n    : 'Experience should be equal or more zero ';\n\n  const isLessThanAge = experience < age;\n  errorMessage += isLessThanAge\n    ? ''\n    : 'Experience should be less than age';\n\n  const isValid = isPositive && isLessThanAge;\n\n  return {\n    value: experience,\n    errorMessage,\n    isValid,\n  };\n};\n","export const expirationDateValidator = (date: string) => {\n  const firstFormatRegExp = /(^(((\\d\\d)(([02468][048])|([13579][26]))-02-29)|(((\\d\\d)(\\d\\d)))-((((0\\d)|(1[0-2]))-((0\\d)|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30))))))/;\n  const secondFormatRegExp = /(^((((0\\d)|(1[0-2]))\\/((0\\d)|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))\\/(((\\d\\d)(([02468][048])|([13579][26]))-02-29)|(((\\d\\d)(\\d\\d))))/;\n\n  const trimmedDate = date.trim();\n  let errorMessage = '';\n\n  const isCorrectFormat\n    = firstFormatRegExp.test(trimmedDate)\n    || secondFormatRegExp.test(trimmedDate);\n\n  errorMessage += isCorrectFormat\n    ? ''\n    : 'Date format is not valid ';\n\n  const currentDate = new Date().toDateString();\n\n  const isLicenseValid = Date.parse(currentDate) < Date.parse(trimmedDate);\n  errorMessage += isLicenseValid\n    ? ''\n    : 'Expiration date is not valid';\n\n  const isValid = isCorrectFormat && isLicenseValid;\n\n  return {\n    value: trimmedDate,\n    errorMessage,\n    isValid,\n  };\n};\n","export const hasChildrenValidator = (hasChildren: boolean | string) => {\n  let isValid = true;\n  let value = '';\n  let errorMessage = '';\n\n  if (typeof hasChildren === 'string') {\n    const trimmedHasChildren = hasChildren.trim();\n\n    switch (trimmedHasChildren) {\n      case '':\n        isValid = true;\n        value = 'FALSE';\n        break;\n      case 'TRUE':\n      case 'FALSE':\n        isValid = true;\n        value = trimmedHasChildren;\n        break;\n      default:\n        isValid = false;\n        value = trimmedHasChildren;\n        errorMessage = 'Value should be TRUE/FALSE or empty';\n    }\n  } else {\n    value = hasChildren\n      ? 'TRUE'\n      : 'FALSE';\n  }\n\n  return {\n    value,\n    errorMessage,\n    isValid,\n  };\n};\n","export const licenseNumberValidator = (licenseNumber: string) => {\n  const trimmedLicenseNumber = licenseNumber.trim();\n  const licenseNumberRegExp = /^(([a-zA-Z]|[\\d]){6})$/;\n\n  let errorMessage = '';\n\n  const isValid = licenseNumberRegExp.test(trimmedLicenseNumber);\n  errorMessage = isValid\n    ? ''\n    : 'License number is not valid';\n\n  return {\n    value: trimmedLicenseNumber,\n    errorMessage,\n    isValid,\n  };\n};\n","export const states = [\n  {\n    name: 'Alabama',\n    abbreviation: 'AL',\n  },\n  {\n    name: 'Alaska',\n    abbreviation: 'AK',\n  },\n  {\n    name: 'American Samoa',\n    abbreviation: 'AS',\n  },\n  {\n    name: 'Arizona',\n    abbreviation: 'AZ',\n  },\n  {\n    name: 'Arkansas',\n    abbreviation: 'AR',\n  },\n  {\n    name: 'California',\n    abbreviation: 'CA',\n  },\n  {\n    name: 'Colorado',\n    abbreviation: 'CO',\n  },\n  {\n    name: 'Connecticut',\n    abbreviation: 'CT',\n  },\n  {\n    name: 'Delaware',\n    abbreviation: 'DE',\n  },\n  {\n    name: 'District Of Columbia',\n    abbreviation: 'DC',\n  },\n  {\n    name: 'Federated States Of Micronesia',\n    abbreviation: 'FM',\n  },\n  {\n    name: 'Florida',\n    abbreviation: 'FL',\n  },\n  {\n    name: 'Georgia',\n    abbreviation: 'GA',\n  },\n  {\n    name: 'Guam',\n    abbreviation: 'GU',\n  },\n  {\n    name: 'Hawaii',\n    abbreviation: 'HI',\n  },\n  {\n    name: 'Idaho',\n    abbreviation: 'ID',\n  },\n  {\n    name: 'Illinois',\n    abbreviation: 'IL',\n  },\n  {\n    name: 'Indiana',\n    abbreviation: 'IN',\n  },\n  {\n    name: 'Iowa',\n    abbreviation: 'IA',\n  },\n  {\n    name: 'Kansas',\n    abbreviation: 'KS',\n  },\n  {\n    name: 'Kentucky',\n    abbreviation: 'KY',\n  },\n  {\n    name: 'Louisiana',\n    abbreviation: 'LA',\n  },\n  {\n    name: 'Maine',\n    abbreviation: 'ME',\n  },\n  {\n    name: 'Marshall Islands',\n    abbreviation: 'MH',\n  },\n  {\n    name: 'Maryland',\n    abbreviation: 'MD',\n  },\n  {\n    name: 'Massachusetts',\n    abbreviation: 'MA',\n  },\n  {\n    name: 'Michigan',\n    abbreviation: 'MI',\n  },\n  {\n    name: 'Minnesota',\n    abbreviation: 'MN',\n  },\n  {\n    name: 'Mississippi',\n    abbreviation: 'MS',\n  },\n  {\n    name: 'Missouri',\n    abbreviation: 'MO',\n  },\n  {\n    name: 'Montana',\n    abbreviation: 'MT',\n  },\n  {\n    name: 'Nebraska',\n    abbreviation: 'NE',\n  },\n  {\n    name: 'Nevada',\n    abbreviation: 'NV',\n  },\n  {\n    name: 'New Hampshire',\n    abbreviation: 'NH',\n  },\n  {\n    name: 'New Jersey',\n    abbreviation: 'NJ',\n  },\n  {\n    name: 'New Mexico',\n    abbreviation: 'NM',\n  },\n  {\n    name: 'New York',\n    abbreviation: 'NY',\n  },\n  {\n    name: 'North Carolina',\n    abbreviation: 'NC',\n  },\n  {\n    name: 'North Dakota',\n    abbreviation: 'ND',\n  },\n  {\n    name: 'Northern Mariana Islands',\n    abbreviation: 'MP',\n  },\n  {\n    name: 'Ohio',\n    abbreviation: 'OH',\n  },\n  {\n    name: 'Oklahoma',\n    abbreviation: 'OK',\n  },\n  {\n    name: 'Oregon',\n    abbreviation: 'OR',\n  },\n  {\n    name: 'Palau',\n    abbreviation: 'PW',\n  },\n  {\n    name: 'Pennsylvania',\n    abbreviation: 'PA',\n  },\n  {\n    name: 'Puerto Rico',\n    abbreviation: 'PR',\n  },\n  {\n    name: 'Rhode Island',\n    abbreviation: 'RI',\n  },\n  {\n    name: 'South Carolina',\n    abbreviation: 'SC',\n  },\n  {\n    name: 'South Dakota',\n    abbreviation: 'SD',\n  },\n  {\n    name: 'Tennessee',\n    abbreviation: 'TN',\n  },\n  {\n    name: 'Texas',\n    abbreviation: 'TX',\n  },\n  {\n    name: 'Utah',\n    abbreviation: 'UT',\n  },\n  {\n    name: 'Vermont',\n    abbreviation: 'VT',\n  },\n  {\n    name: 'Virgin Islands',\n    abbreviation: 'VI',\n  },\n  {\n    name: 'Virginia',\n    abbreviation: 'VA',\n  },\n  {\n    name: 'Washington',\n    abbreviation: 'WA',\n  },\n  {\n    name: 'West Virginia',\n    abbreviation: 'WV',\n  },\n  {\n    name: 'Wisconsin',\n    abbreviation: 'WI',\n  },\n  {\n    name: 'Wyoming',\n    abbreviation: 'WY',\n  },\n];\n","import { states } from '../states';\n\nexport const licenseStatesValidator = (statesString: string) => {\n  const enteredStates = statesString.trim().split(' | ');\n  let errorMessage = '';\n  let isValid = true;\n\n  const formattedStates = enteredStates.map(state => {\n    const lowState = state.toLowerCase();\n    const foundedState = states.find(basicState => (\n      basicState.name.toLowerCase() === lowState\n      || basicState.abbreviation.toLowerCase() === lowState\n    ));\n\n    if (!foundedState) {\n      errorMessage = 'One of the states is not valid';\n      isValid = false;\n    }\n\n    return foundedState\n      ? foundedState.abbreviation\n      : state;\n  });\n\n  return {\n    value: formattedStates.join(' | '),\n    errorMessage,\n    isValid,\n  };\n};\n","export const nameValidator = (\n  name: string,\n  setGlobalError: React.Dispatch<React.SetStateAction<boolean>>,\n) => {\n  let errorMessage = '';\n  let isValid = false;\n  let trimmedName = '';\n\n  if (name === null) {\n    setGlobalError(true);\n  } else {\n    trimmedName = name.trim();\n\n    if (trimmedName === '') {\n      setGlobalError(true);\n    }\n  }\n\n  isValid = trimmedName.includes(' ');\n  errorMessage = isValid\n    ? ''\n    : 'Full name should include at least two words';\n\n  return {\n    value: trimmedName,\n    errorMessage,\n    isValid,\n  };\n};\n","export const phoneValidator = (\n  phone: string,\n  setGlobalError: React.Dispatch<React.SetStateAction<boolean>>,\n) => {\n  const phoneRegExp = /^(\\+1|\\+)?([\\d]{10,11}$)/;\n\n  let formattedPhone = '';\n  let errorMessage = '';\n  let trimmedPhone = '';\n\n  if (phone === null) {\n    setGlobalError(true);\n  } else {\n    trimmedPhone = phone.trim();\n\n    if (trimmedPhone === '') {\n      setGlobalError(true);\n    }\n  }\n\n  const isValid = phoneRegExp.test(trimmedPhone);\n\n  if (isValid) {\n    switch (trimmedPhone.length) {\n      case 10:\n        formattedPhone = `+1${trimmedPhone}`;\n        break;\n      case 11:\n        formattedPhone = `+${trimmedPhone}`;\n        break;\n      default:\n        formattedPhone = trimmedPhone;\n        break;\n    }\n  } else {\n    formattedPhone = trimmedPhone;\n    errorMessage = 'Phone format is not valid';\n  }\n\n  return {\n    value: formattedPhone,\n    errorMessage,\n    isValid,\n  };\n};\n","export const yearlyIncomeValidator = (yearlyIncome: number) => {\n  let errorMessage = '';\n\n  const isPositive = yearlyIncome > 0;\n  errorMessage = isPositive\n    ? ''\n    : 'Yearly income should be equal or more zero';\n\n  const isLessThanMillion = yearlyIncome <= 1000000;\n  errorMessage = isLessThanMillion\n    ? ''\n    : 'Yearly income should be equal or less than one million';\n\n  const value = +yearlyIncome.toFixed(2);\n\n  const isValid = isPositive && isLessThanMillion;\n\n  return {\n    errorMessage,\n    value,\n    isValid,\n  };\n};\n","import Papa from 'papaparse';\nimport { LawyerData } from './types/lawyerData';\n\nconst header = 'Full Name,Phone,Email,Age,Experience,Yearly Income,Has children,License states,Expiration date,License number\\r\\n';\n\nconst parseConfig = {\n  header: true,\n  dynamicTyping: true,\n};\n\nexport const parser = (data: string) => {\n  const parseResult = data.toLowerCase().includes(header.toLowerCase())\n    ? Papa.parse(data, parseConfig)\n    : Papa.parse((header + data), parseConfig);\n\n  return parseResult.data as LawyerData[];\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { FileUploader } from './Components/FileUploader/FileUploader';\nimport { Table } from './Components/Table/Table';\nimport { validator } from './Components/validator';\nimport { parser } from './parser';\nimport { LawyerData } from './types/lawyerData';\nimport { ValidatedLawyer } from './types/validatedLawyer';\n\nexport const App: React.FC = () => {\n  const [fileData, setFileData] = useState('');\n  const [parsedData, setParsedData] = useState<LawyerData[]>([]);\n  const [validatedData, setValidatedData] = useState<ValidatedLawyer[]>([]);\n  const [globalError, setGlobalError] = useState(false);\n\n  useEffect(() => {\n    setParsedData(parser(fileData));\n  }, [fileData]);\n\n  const showTable = () => {\n    setGlobalError(false);\n    setValidatedData(validator(parsedData, setGlobalError));\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <FileUploader setFileData={setFileData} />\n      </div>\n\n      <button\n        type=\"button\"\n        onClick={() => showTable()}\n        disabled={parsedData.length <= 0}\n      >\n        Show Table\n      </button>\n\n      {globalError\n        ? <div>File is invalid</div>\n        : validatedData.length > 0 && <Table validatedData={validatedData} />}\n    </>\n  );\n};\n","import { ageValidator } from '../FieldsValidators/ageValidator';\nimport { duplicateValidator } from '../FieldsValidators/duplicateValidator';\nimport { emailValidator } from '../FieldsValidators/emailValidator';\nimport { experienceValidator } from '../FieldsValidators/experienceValidator';\nimport { expirationDateValidator } from '../FieldsValidators/expirationDateValidator';\nimport { hasChildrenValidator } from '../FieldsValidators/hasChildrenValidator';\nimport { licenseNumberValidator } from '../FieldsValidators/licenseNumberValidator';\nimport { licenseStatesValidator } from '../FieldsValidators/licenseStatesValidator';\nimport { nameValidator } from '../FieldsValidators/nameValidator';\nimport { phoneValidator } from '../FieldsValidators/phoneValidator';\nimport { yearlyIncomeValidator } from '../FieldsValidators/yearlyIncomeValidator';\nimport { LawyerData } from '../types/lawyerData';\nimport { ValidatedLawyer } from '../types/validatedLawyer';\n\nexport const validator = (\n  data: LawyerData[],\n  setGlobalError: React.Dispatch<React.SetStateAction<boolean>>,\n) => {\n  let validatedData = data.map(lawyer => {\n    const validatedLawyer: ValidatedLawyer = {} as ValidatedLawyer;\n\n    let idCounter = 1;\n    validatedLawyer.ID = idCounter;\n\n    validatedLawyer['Duplicated with'] = null;\n\n    for (const key in lawyer) {\n      switch (key) {\n        case 'Full Name':\n          validatedLawyer[key] = nameValidator(lawyer[key], setGlobalError);\n          break;\n        case 'Phone':\n          validatedLawyer[key] = phoneValidator(lawyer[key], setGlobalError);\n          break;\n        case 'Email':\n          validatedLawyer[key] = emailValidator(lawyer[key], setGlobalError);\n          break;\n        case 'Age':\n          validatedLawyer[key] = ageValidator(lawyer[key]);\n          break;\n        case 'Experience':\n          validatedLawyer[key] = experienceValidator(lawyer[key], lawyer.Age);\n          break;\n        case 'Yearly Income':\n          validatedLawyer[key] = yearlyIncomeValidator(lawyer[key]);\n          break;\n        case 'Has children':\n          validatedLawyer[key] = hasChildrenValidator(lawyer[key]);\n          break;\n        case 'License states':\n          validatedLawyer[key] = licenseStatesValidator(lawyer[key]);\n          break;\n        case 'Expiration date':\n          validatedLawyer[key] = expirationDateValidator(lawyer[key]);\n          break;\n        case 'License number':\n          validatedLawyer[key] = licenseNumberValidator(lawyer[key]);\n          break;\n        default:\n          break;\n      }\n    }\n\n    idCounter += 1;\n\n    return validatedLawyer;\n  });\n\n  validatedData = duplicateValidator(validatedData);\n\n  return validatedData;\n};\n","import { ValidatedLawyer } from '../types/validatedLawyer';\n\nexport const duplicateValidator = (validatedData: ValidatedLawyer[]) => {\n  return validatedData.map(lawyer => {\n    const foundedDuplicate = validatedData.find(duplicate => {\n      return (duplicate.Phone === lawyer.Phone || duplicate.Email === lawyer.Email)\n      && duplicate.ID !== lawyer.ID;\n    });\n\n    if (foundedDuplicate) {\n      lawyer['Duplicated with'] = foundedDuplicate.ID;\n    }\n\n    return lawyer;\n  });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}